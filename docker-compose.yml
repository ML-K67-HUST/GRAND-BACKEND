services:
  db:
    image: postgres:15-alpine
    container_name: timenest_db
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-timenest}
      POSTGRES_USER: ${POSTGRES_USER:-timenest}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-timenest_password_123}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - timenest_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U timenest -d timenest"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: timenest_backend
    ports:
      - "5050:5050"
    environment:
      APP_NAME: "TimeNest Backend"
      ENVIRONMENT: development
      DEBUG: "true"
      LOG_LEVEL: INFO
      HOST: "0.0.0.0"
      PORT: 5050
      
      POSTGRES_HOST: ${POSTGRES_HOST:-db}
      POSTGRES_PORT: ${POSTGRES_PORT:-5432}
      POSTGRES_USER: ${POSTGRES_USER:-timenest}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-timenest_password_123}
      POSTGRES_DB: ${POSTGRES_DB:-timenest}
      
      DB_POOL_SIZE: 10
      DB_MAX_OVERFLOW: 20
      DB_POOL_TIMEOUT: 30
      DB_POOL_RECYCLE: 3600
      
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_DB: 0
      
      JWT_SECRET_KEY: ${JWT_SECRET_KEY:-"secret-key"}
      JWT_REFRESH_SECRET_KEY: ${JWT_REFRESH_SECRET_KEY:-"secret-refresh-key"}
      JWT_ACCESS_TOKEN_EXPIRE_MINUTES: ${JWT_ACCESS_TOKEN_EXPIRE_MINUTES:-30}
      JWT_REFRESH_TOKEN_EXPIRE_DAYS: ${JWT_REFRESH_TOKEN_EXPIRE_DAYS:-7}
      
      SECRET_KEY: ${SECRET_KEY:-"your-application-secret-key-for-development-32-chars-minimum"}
      CORS_ORIGINS: '["http://localhost:3000", "http://127.0.0.1:3000", "http://localhost:5050"]'
      
    depends_on:
      db:
        condition: service_healthy
    networks:
      - timenest_network
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: timenest_redis
    ports:
      - "6379:6379"
    networks:
      - timenest_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
    driver: local

networks:
  timenest_network:
    driver: bridge 